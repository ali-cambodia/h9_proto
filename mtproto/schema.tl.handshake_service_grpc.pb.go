//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: schema.tl.handshake_service.proto

package mtproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPCAuthKey_ReqPq_FullMethodName              = "/mtproto.RPCAuthKey/req_pq"
	RPCAuthKey_ReqPqMulti_FullMethodName         = "/mtproto.RPCAuthKey/req_pq_multi"
	RPCAuthKey_Req_DHParams_FullMethodName       = "/mtproto.RPCAuthKey/req_DH_params"
	RPCAuthKey_SetClient_DHParams_FullMethodName = "/mtproto.RPCAuthKey/set_client_DH_params"
	RPCAuthKey_DestroyAuthKey_FullMethodName     = "/mtproto.RPCAuthKey/destroy_auth_key"
)

// RPCAuthKeyClient is the client API for RPCAuthKey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCAuthKeyClient interface {
	// req_pq#60469778 nonce:int128 = ResPQ;
	ReqPq(ctx context.Context, in *TLReqPq, opts ...grpc.CallOption) (*ResPQ, error)
	// req_pq_multi#be7e8ef1 nonce:int128 = ResPQ;
	ReqPqMulti(ctx context.Context, in *TLReqPqMulti, opts ...grpc.CallOption) (*ResPQ, error)
	// req_DH_params#d712e4be nonce:int128 server_nonce:int128 p:string q:string public_key_fingerprint:long encrypted_data:string = Server_DH_Params;
	Req_DHParams(ctx context.Context, in *TLReq_DHParams, opts ...grpc.CallOption) (*Server_DH_Params, error)
	// set_client_DH_params#f5045f1f nonce:int128 server_nonce:int128 encrypted_data:string = Set_client_DH_params_answer;
	SetClient_DHParams(ctx context.Context, in *TLSetClient_DHParams, opts ...grpc.CallOption) (*SetClient_DHParamsAnswer, error)
	// destroy_auth_key#d1435160 = DestroyAuthKeyRes;
	DestroyAuthKey(ctx context.Context, in *TLDestroyAuthKey, opts ...grpc.CallOption) (*DestroyAuthKeyRes, error)
}

type rPCAuthKeyClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCAuthKeyClient(cc grpc.ClientConnInterface) RPCAuthKeyClient {
	return &rPCAuthKeyClient{cc}
}

func (c *rPCAuthKeyClient) ReqPq(ctx context.Context, in *TLReqPq, opts ...grpc.CallOption) (*ResPQ, error) {
	out := new(ResPQ)
	err := c.cc.Invoke(ctx, RPCAuthKey_ReqPq_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthKeyClient) ReqPqMulti(ctx context.Context, in *TLReqPqMulti, opts ...grpc.CallOption) (*ResPQ, error) {
	out := new(ResPQ)
	err := c.cc.Invoke(ctx, RPCAuthKey_ReqPqMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthKeyClient) Req_DHParams(ctx context.Context, in *TLReq_DHParams, opts ...grpc.CallOption) (*Server_DH_Params, error) {
	out := new(Server_DH_Params)
	err := c.cc.Invoke(ctx, RPCAuthKey_Req_DHParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthKeyClient) SetClient_DHParams(ctx context.Context, in *TLSetClient_DHParams, opts ...grpc.CallOption) (*SetClient_DHParamsAnswer, error) {
	out := new(SetClient_DHParamsAnswer)
	err := c.cc.Invoke(ctx, RPCAuthKey_SetClient_DHParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthKeyClient) DestroyAuthKey(ctx context.Context, in *TLDestroyAuthKey, opts ...grpc.CallOption) (*DestroyAuthKeyRes, error) {
	out := new(DestroyAuthKeyRes)
	err := c.cc.Invoke(ctx, RPCAuthKey_DestroyAuthKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAuthKeyServer is the server API for RPCAuthKey service.
// All implementations should embed UnimplementedRPCAuthKeyServer
// for forward compatibility
type RPCAuthKeyServer interface {
	// req_pq#60469778 nonce:int128 = ResPQ;
	ReqPq(context.Context, *TLReqPq) (*ResPQ, error)
	// req_pq_multi#be7e8ef1 nonce:int128 = ResPQ;
	ReqPqMulti(context.Context, *TLReqPqMulti) (*ResPQ, error)
	// req_DH_params#d712e4be nonce:int128 server_nonce:int128 p:string q:string public_key_fingerprint:long encrypted_data:string = Server_DH_Params;
	Req_DHParams(context.Context, *TLReq_DHParams) (*Server_DH_Params, error)
	// set_client_DH_params#f5045f1f nonce:int128 server_nonce:int128 encrypted_data:string = Set_client_DH_params_answer;
	SetClient_DHParams(context.Context, *TLSetClient_DHParams) (*SetClient_DHParamsAnswer, error)
	// destroy_auth_key#d1435160 = DestroyAuthKeyRes;
	DestroyAuthKey(context.Context, *TLDestroyAuthKey) (*DestroyAuthKeyRes, error)
}

// UnimplementedRPCAuthKeyServer should be embedded to have forward compatible implementations.
type UnimplementedRPCAuthKeyServer struct {
}

func (UnimplementedRPCAuthKeyServer) ReqPq(context.Context, *TLReqPq) (*ResPQ, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqPq not implemented")
}
func (UnimplementedRPCAuthKeyServer) ReqPqMulti(context.Context, *TLReqPqMulti) (*ResPQ, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqPqMulti not implemented")
}
func (UnimplementedRPCAuthKeyServer) Req_DHParams(context.Context, *TLReq_DHParams) (*Server_DH_Params, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Req_DHParams not implemented")
}
func (UnimplementedRPCAuthKeyServer) SetClient_DHParams(context.Context, *TLSetClient_DHParams) (*SetClient_DHParamsAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClient_DHParams not implemented")
}
func (UnimplementedRPCAuthKeyServer) DestroyAuthKey(context.Context, *TLDestroyAuthKey) (*DestroyAuthKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAuthKey not implemented")
}

// UnsafeRPCAuthKeyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCAuthKeyServer will
// result in compilation errors.
type UnsafeRPCAuthKeyServer interface {
	mustEmbedUnimplementedRPCAuthKeyServer()
}

func RegisterRPCAuthKeyServer(s grpc.ServiceRegistrar, srv RPCAuthKeyServer) {
	s.RegisterService(&RPCAuthKey_ServiceDesc, srv)
}

func _RPCAuthKey_ReqPq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLReqPq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthKeyServer).ReqPq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthKey_ReqPq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthKeyServer).ReqPq(ctx, req.(*TLReqPq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthKey_ReqPqMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLReqPqMulti)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthKeyServer).ReqPqMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthKey_ReqPqMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthKeyServer).ReqPqMulti(ctx, req.(*TLReqPqMulti))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthKey_Req_DHParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLReq_DHParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthKeyServer).Req_DHParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthKey_Req_DHParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthKeyServer).Req_DHParams(ctx, req.(*TLReq_DHParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthKey_SetClient_DHParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSetClient_DHParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthKeyServer).SetClient_DHParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthKey_SetClient_DHParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthKeyServer).SetClient_DHParams(ctx, req.(*TLSetClient_DHParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthKey_DestroyAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDestroyAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthKeyServer).DestroyAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthKey_DestroyAuthKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthKeyServer).DestroyAuthKey(ctx, req.(*TLDestroyAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCAuthKey_ServiceDesc is the grpc.ServiceDesc for RPCAuthKey service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCAuthKey_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAuthKey",
	HandlerType: (*RPCAuthKeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "req_pq",
			Handler:    _RPCAuthKey_ReqPq_Handler,
		},
		{
			MethodName: "req_pq_multi",
			Handler:    _RPCAuthKey_ReqPqMulti_Handler,
		},
		{
			MethodName: "req_DH_params",
			Handler:    _RPCAuthKey_Req_DHParams_Handler,
		},
		{
			MethodName: "set_client_DH_params",
			Handler:    _RPCAuthKey_SetClient_DHParams_Handler,
		},
		{
			MethodName: "destroy_auth_key",
			Handler:    _RPCAuthKey_DestroyAuthKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.handshake_service.proto",
}
