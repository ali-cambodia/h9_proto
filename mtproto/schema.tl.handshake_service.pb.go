//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.1
// source: schema.tl.handshake_service.proto

package mtproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLReqPq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce       []byte        `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *TLReqPq) Reset() {
	*x = TLReqPq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_tl_handshake_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLReqPq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLReqPq) ProtoMessage() {}

func (x *TLReqPq) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_handshake_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLReqPq.ProtoReflect.Descriptor instead.
func (*TLReqPq) Descriptor() ([]byte, []int) {
	return file_schema_tl_handshake_service_proto_rawDescGZIP(), []int{0}
}

func (x *TLReqPq) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLReqPq) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type TLReqPqMulti struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce       []byte        `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *TLReqPqMulti) Reset() {
	*x = TLReqPqMulti{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_tl_handshake_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLReqPqMulti) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLReqPqMulti) ProtoMessage() {}

func (x *TLReqPqMulti) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_handshake_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLReqPqMulti.ProtoReflect.Descriptor instead.
func (*TLReqPqMulti) Descriptor() ([]byte, []int) {
	return file_schema_tl_handshake_service_proto_rawDescGZIP(), []int{1}
}

func (x *TLReqPqMulti) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLReqPqMulti) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type TLReq_DHParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce                []byte        `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ServerNonce          []byte        `protobuf:"bytes,4,opt,name=server_nonce,json=serverNonce,proto3" json:"server_nonce,omitempty"`
	P                    string        `protobuf:"bytes,5,opt,name=p,proto3" json:"p,omitempty"`
	Q                    string        `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	PublicKeyFingerprint int64         `protobuf:"varint,7,opt,name=public_key_fingerprint,json=publicKeyFingerprint,proto3" json:"public_key_fingerprint,omitempty"`
	EncryptedData        string        `protobuf:"bytes,8,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
}

func (x *TLReq_DHParams) Reset() {
	*x = TLReq_DHParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_tl_handshake_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLReq_DHParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLReq_DHParams) ProtoMessage() {}

func (x *TLReq_DHParams) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_handshake_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLReq_DHParams.ProtoReflect.Descriptor instead.
func (*TLReq_DHParams) Descriptor() ([]byte, []int) {
	return file_schema_tl_handshake_service_proto_rawDescGZIP(), []int{2}
}

func (x *TLReq_DHParams) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLReq_DHParams) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *TLReq_DHParams) GetServerNonce() []byte {
	if x != nil {
		return x.ServerNonce
	}
	return nil
}

func (x *TLReq_DHParams) GetP() string {
	if x != nil {
		return x.P
	}
	return ""
}

func (x *TLReq_DHParams) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLReq_DHParams) GetPublicKeyFingerprint() int64 {
	if x != nil {
		return x.PublicKeyFingerprint
	}
	return 0
}

func (x *TLReq_DHParams) GetEncryptedData() string {
	if x != nil {
		return x.EncryptedData
	}
	return ""
}

type TLSetClient_DHParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor   TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce         []byte        `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ServerNonce   []byte        `protobuf:"bytes,4,opt,name=server_nonce,json=serverNonce,proto3" json:"server_nonce,omitempty"`
	EncryptedData string        `protobuf:"bytes,5,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
}

func (x *TLSetClient_DHParams) Reset() {
	*x = TLSetClient_DHParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_tl_handshake_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSetClient_DHParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSetClient_DHParams) ProtoMessage() {}

func (x *TLSetClient_DHParams) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_handshake_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSetClient_DHParams.ProtoReflect.Descriptor instead.
func (*TLSetClient_DHParams) Descriptor() ([]byte, []int) {
	return file_schema_tl_handshake_service_proto_rawDescGZIP(), []int{3}
}

func (x *TLSetClient_DHParams) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLSetClient_DHParams) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *TLSetClient_DHParams) GetServerNonce() []byte {
	if x != nil {
		return x.ServerNonce
	}
	return nil
}

func (x *TLSetClient_DHParams) GetEncryptedData() string {
	if x != nil {
		return x.EncryptedData
	}
	return ""
}

type TLDestroyAuthKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
}

func (x *TLDestroyAuthKey) Reset() {
	*x = TLDestroyAuthKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_tl_handshake_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDestroyAuthKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDestroyAuthKey) ProtoMessage() {}

func (x *TLDestroyAuthKey) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_handshake_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDestroyAuthKey.ProtoReflect.Descriptor instead.
func (*TLDestroyAuthKey) Descriptor() ([]byte, []int) {
	return file_schema_tl_handshake_service_proto_rawDescGZIP(), []int{4}
}

func (x *TLDestroyAuthKey) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

var File_schema_tl_handshake_service_proto protoreflect.FileDescriptor

var file_schema_tl_handshake_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x68, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x63, 0x72, 0x63, 0x33, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x68,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b,
	0x0a, 0x09, 0x54, 0x4c, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x70, 0x71, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x61, 0x0a, 0x0f, 0x54,
	0x4c, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x70, 0x71, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xfe,
	0x01, 0x0a, 0x10, 0x54, 0x4c, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x44, 0x48, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x71, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xb3, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x44, 0x48, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x13, 0x54, 0x4c, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x32, 0xf3, 0x02, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x41, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x70, 0x71, 0x12,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x70, 0x71, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x50, 0x51, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x5f, 0x70, 0x71, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x70, 0x71, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x1a,
	0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x50, 0x51, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x5f, 0x44, 0x48, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x72, 0x65, 0x71, 0x5f, 0x44, 0x48, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x19, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x44,
	0x48, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x14, 0x73, 0x65,
	0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x48, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x48, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x48, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79,
	0x12, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x1a, 0x1a,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x2a, 0x5a, 0x28,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x69, 0x2d, 0x63,
	0x61, 0x6d, 0x62, 0x6f, 0x64, 0x69, 0x61, 0x2f, 0x68, 0x39, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schema_tl_handshake_service_proto_rawDescOnce sync.Once
	file_schema_tl_handshake_service_proto_rawDescData = file_schema_tl_handshake_service_proto_rawDesc
)

func file_schema_tl_handshake_service_proto_rawDescGZIP() []byte {
	file_schema_tl_handshake_service_proto_rawDescOnce.Do(func() {
		file_schema_tl_handshake_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_schema_tl_handshake_service_proto_rawDescData)
	})
	return file_schema_tl_handshake_service_proto_rawDescData
}

var file_schema_tl_handshake_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_schema_tl_handshake_service_proto_goTypes = []interface{}{
	(*TLReqPq)(nil),                  // 0: mtproto.TL_req_pq
	(*TLReqPqMulti)(nil),             // 1: mtproto.TL_req_pq_multi
	(*TLReq_DHParams)(nil),           // 2: mtproto.TL_req_DH_params
	(*TLSetClient_DHParams)(nil),     // 3: mtproto.TL_set_client_DH_params
	(*TLDestroyAuthKey)(nil),         // 4: mtproto.TL_destroy_auth_key
	(TLConstructor)(0),               // 5: mtproto.TLConstructor
	(*ResPQ)(nil),                    // 6: mtproto.ResPQ
	(*Server_DH_Params)(nil),         // 7: mtproto.Server_DH_Params
	(*SetClient_DHParamsAnswer)(nil), // 8: mtproto.Set_client_DH_params_answer
	(*DestroyAuthKeyRes)(nil),        // 9: mtproto.DestroyAuthKeyRes
}
var file_schema_tl_handshake_service_proto_depIdxs = []int32{
	5,  // 0: mtproto.TL_req_pq.constructor:type_name -> mtproto.TLConstructor
	5,  // 1: mtproto.TL_req_pq_multi.constructor:type_name -> mtproto.TLConstructor
	5,  // 2: mtproto.TL_req_DH_params.constructor:type_name -> mtproto.TLConstructor
	5,  // 3: mtproto.TL_set_client_DH_params.constructor:type_name -> mtproto.TLConstructor
	5,  // 4: mtproto.TL_destroy_auth_key.constructor:type_name -> mtproto.TLConstructor
	0,  // 5: mtproto.RPCAuthKey.req_pq:input_type -> mtproto.TL_req_pq
	1,  // 6: mtproto.RPCAuthKey.req_pq_multi:input_type -> mtproto.TL_req_pq_multi
	2,  // 7: mtproto.RPCAuthKey.req_DH_params:input_type -> mtproto.TL_req_DH_params
	3,  // 8: mtproto.RPCAuthKey.set_client_DH_params:input_type -> mtproto.TL_set_client_DH_params
	4,  // 9: mtproto.RPCAuthKey.destroy_auth_key:input_type -> mtproto.TL_destroy_auth_key
	6,  // 10: mtproto.RPCAuthKey.req_pq:output_type -> mtproto.ResPQ
	6,  // 11: mtproto.RPCAuthKey.req_pq_multi:output_type -> mtproto.ResPQ
	7,  // 12: mtproto.RPCAuthKey.req_DH_params:output_type -> mtproto.Server_DH_Params
	8,  // 13: mtproto.RPCAuthKey.set_client_DH_params:output_type -> mtproto.Set_client_DH_params_answer
	9,  // 14: mtproto.RPCAuthKey.destroy_auth_key:output_type -> mtproto.DestroyAuthKeyRes
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_schema_tl_handshake_service_proto_init() }
func file_schema_tl_handshake_service_proto_init() {
	if File_schema_tl_handshake_service_proto != nil {
		return
	}
	file_schema_tl_crc32_proto_init()
	file_schema_tl_handshake_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_schema_tl_handshake_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLReqPq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_tl_handshake_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLReqPqMulti); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_tl_handshake_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLReq_DHParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_tl_handshake_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSetClient_DHParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_tl_handshake_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDestroyAuthKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schema_tl_handshake_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_schema_tl_handshake_service_proto_goTypes,
		DependencyIndexes: file_schema_tl_handshake_service_proto_depIdxs,
		MessageInfos:      file_schema_tl_handshake_service_proto_msgTypes,
	}.Build()
	File_schema_tl_handshake_service_proto = out.File
	file_schema_tl_handshake_service_proto_rawDesc = nil
	file_schema_tl_handshake_service_proto_goTypes = nil
	file_schema_tl_handshake_service_proto_depIdxs = nil
}
